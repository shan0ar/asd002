#!/bin/bash
set -u

ASSET="$1"
SCANID="$2"
LOGDIR="/opt/asd002-logs"
PSQL_CMD="psql -h localhost -p 5432 -d osintapp -U thomas"
export PGPASSWORD="thomas"
LOGFILE="${LOGDIR}/scan_whois_${SCANID}.log"
EXCEPTIONS_FILE="/var/www/html/asd002/exceptions.txt"

mkdir -p "$LOGDIR"
exec > >(tee -a "$LOGFILE") 2>&1

# Exceptions logic
parse_exceptions() {
    whitelist=()
    blacklist=()
    if [[ -f "$EXCEPTIONS_FILE" ]]; then
        while IFS= read -r line; do
            line="${line%%#*}"
            [[ -z "$line" ]] && continue
            if [[ "$line" =~ ^whitelist[[:space:]]*:[[:space:]]*(.+) ]]; then
                whitelist+=("${BASH_REMATCH[1]}")
            elif [[ "$line" =~ ^blacklist[[:space:]]*:[[:space:]]*(.+) ]]; then
                blacklist+=("${BASH_REMATCH[1]}")
            fi
        done < "$EXCEPTIONS_FILE"
    fi
}

# returns 0 if allowed, 1 if blocked
is_allowed() {
    local domain="$1"
    for pattern in "${whitelist[@]}"; do
        if [[ "$domain" == $pattern ]]; then
            return 0
        fi
    done
    for pattern in "${blacklist[@]}"; do
        if [[ "$domain" == $pattern ]]; then
            return 1
        fi
    done
    return 0
}

insert_asset_discovered() {
    local asset="$1"
    local src="$2"
    local existing
    existing=$($PSQL_CMD -tAc "SELECT id, source FROM assets_discovered WHERE scan_id=$SCANID AND asset='$asset'")
    local now
    now=$(date +"%Y-%m-%d %H:%M:%S")
    if [[ -n "$existing" ]]; then
        local id old_source
        id=$(echo "$existing" | awk '{print $1}')
        old_source=$(echo "$existing" | awk '{$1=""; print substr($0,2)}')
        if [[ "$old_source" != *"$src"* ]]; then
            local new_source="$old_source & $src"
            $PSQL_CMD -c "UPDATE assets_discovered SET source='$new_source', last_seen='$now' WHERE id=$id"
        else
            $PSQL_CMD -c "UPDATE assets_discovered SET last_seen='$now' WHERE id=$id"
        fi
    else
        $PSQL_CMD -c "INSERT INTO assets_discovered (scan_id, asset, source, detected_at, client_id, last_seen) VALUES ($SCANID, '$asset', '$src', '$now', $client_id, '$now');"
    fi
}

get_root_domain() {
    # Extrait le domaine parent d'un FQDN (ex: ns1.wordpress.com -> wordpress.com)
    local fqdn="$1"
    if [[ $(grep -o '\.' <<< "$fqdn" | wc -l) -ge 1 ]]; then
        echo "$fqdn" | awk -F. '{print $(NF-1)"."$NF}'
    fi
}

client_id=$($PSQL_CMD -tAc "SELECT client_id FROM scans WHERE id=$SCANID")
if [[ -z "$client_id" ]]; then
    echo "ERROR: client_id introuvable pour scan $SCANID"
    exit 1
fi

WHOIS_TXT="${LOGDIR}/whois_${SCANID}.txt"
timeout 120 whois "${ASSET#*//}" > "$WHOIS_TXT" 2>>"$LOGFILE" || echo "WARNING: whois timeout ou erreur pour $ASSET"
WHOIS_RAW=$(cat "$WHOIS_TXT" | sed "s/'/''/g")
WHOIS_DOMAIN=$(grep -iE '^Domain(Name)?:' "$WHOIS_TXT" | head -1 | awk '{print $NF}')
WHOIS_REGISTRAR=$(grep -i 'Registrar:' "$WHOIS_TXT" | grep -v Whois | head -1 | cut -d: -f2- | xargs)
WHOIS_CREATION=$(grep -Ei 'Creation Date:|^created:' "$WHOIS_TXT" | head -1 | awk -F': ' '{print $2}' | awk '{print $1}')
WHOIS_EXPIRY=$(grep -Ei 'Expiry Date:|Expiration Date:' "$WHOIS_TXT" | head -1 | awk '{print $NF}')
WHOIS_DNSSEC=$(grep -i 'DNSSEC:' "$WHOIS_TXT" | head -1 | awk '{print $NF}')
WHOIS_NS1=$(grep -Ei 'Name Server:' "$WHOIS_TXT" | head -1 | awk '{print $NF}')
WHOIS_NS2=$(grep -Ei 'Name Server:' "$WHOIS_TXT" | sed -n '2p' | awk '{print $NF}')
WHOIS_NS_ALL=$(grep -Ei '^(nserver|Name Server):' "$WHOIS_TXT" | awk '{print $NF}' | tr '\n' '|' | sed 's/|$//')
WHOIS_REGISTRANT=$(grep -iE '^Registrant (Name|Organization):' "$WHOIS_TXT" | head -1 | cut -d: -f2- | xargs)

[[ -z "$WHOIS_CREATION" ]] && WHOIS_CREATION=NULL || WHOIS_CREATION="'$WHOIS_CREATION'"
[[ -z "$WHOIS_EXPIRY" ]] && WHOIS_EXPIRY=NULL || WHOIS_EXPIRY="'$WHOIS_EXPIRY'"

# Insert WHOIS data
$PSQL_CMD -c "INSERT INTO whois_data (scan_id, domain, registrar, creation_date, expiry_date, name_server_1, name_server_2, name_servers, registrant, dnssec, raw_output)
VALUES ($SCANID, '$WHOIS_DOMAIN', '$WHOIS_REGISTRAR', $WHOIS_CREATION, $WHOIS_EXPIRY, '$WHOIS_NS1', '$WHOIS_NS2', '$WHOIS_NS_ALL', '$WHOIS_REGISTRANT', '$WHOIS_DNSSEC', \$\$${WHOIS_RAW}\$\$);"

######### Asset discovery: domaines et sous-domaines uniquement (PAS les TLD) #########
parse_exceptions

declare -A discovered

# 1. Domaine principal (must have at least one dot, not a TLD)
if [[ -n "$WHOIS_DOMAIN" && "$WHOIS_DOMAIN" =~ \. ]]; then
    if is_allowed "$WHOIS_DOMAIN"; then
        discovered["$WHOIS_DOMAIN"]=1
    fi
    root_domain=$(get_root_domain "$WHOIS_DOMAIN")
    if [[ -n "$root_domain" && "$root_domain" != "$WHOIS_DOMAIN" ]]; then
        if is_allowed "$root_domain"; then
            discovered["$root_domain"]=1
        fi
    fi
fi

# 2. Sous-domaines : nserver / Name Server
for ns in $(grep -Ei '^(nserver|Name Server):' "$WHOIS_TXT" | awk '{print $NF}' | tr 'A-Z' 'a-z' | sort | uniq); do
    if [[ "$ns" =~ ^([a-z0-9-]+\.)+[a-z]{2,}$ && "$ns" != *" "* && "$ns" != "" ]]; then
        if is_allowed "$ns"; then
            discovered["$ns"]=1
        fi
        root_domain=$(get_root_domain "$ns")
        if [[ -n "$root_domain" && "$root_domain" != "$ns" ]]; then
            if is_allowed "$root_domain"; then
                discovered["$root_domain"]=1
            fi
        fi
    fi
done

# 3a. Tous les FQDN explicites (domaines, sous-domaines, dans tout le texte)
grep -Eo '([a-z0-9-]+\.){1,10}[a-z]{2,}' "$WHOIS_TXT" | tr 'A-Z' 'a-z' | sort | uniq | while read -r fqdn; do
    if [[ "$fqdn" =~ \. && ! ${discovered["$fqdn"]+_} ]]; then
        if is_allowed "$fqdn"; then
            discovered["$fqdn"]=1
        fi
        root_domain=$(get_root_domain "$fqdn")
        if [[ -n "$root_domain" && "$root_domain" != "$fqdn" && ! ${discovered["$root_domain"]+_} ]]; then
            if is_allowed "$root_domain"; then
                discovered["$root_domain"]=1
            fi
        fi
    fi
done

# 3b. Domains in emails
grep -Eo '[A-Za-z0-9._%+-]+@([A-Za-z0-9.-]+\.[A-Za-z]{2,})' "$WHOIS_TXT" | sed 's/.*@//' | tr 'A-Z' 'a-z' | sort | uniq | while read -r emaildomain; do
    if [[ "$emaildomain" =~ \. && ! ${discovered["$emaildomain"]+_} ]]; then
        if is_allowed "$emaildomain"; then
            discovered["$emaildomain"]=1
        fi
        root_domain=$(get_root_domain "$emaildomain")
        if [[ -n "$root_domain" && "$root_domain" != "$emaildomain" && ! ${discovered["$root_domain"]+_} ]]; then
            if is_allowed "$root_domain"; then
                discovered["$root_domain"]=1
            fi
        fi
    fi
done

# 3c. FQDN from URLs
grep -Eo 'https?://[^/")\ ]+' "$WHOIS_TXT" | sed 's#https\?://##' | tr 'A-Z' 'a-z' | sort | uniq | while read -r domainfromurl; do
    domainpart=$(echo "$domainfromurl" | cut -d: -f1 | cut -d/ -f1)
    if [[ "$domainpart" =~ ^([a-z0-9-]+\.)+[a-z]{2,}$ && "$domainpart" != *" "* && "$domainpart" != "" && ! ${discovered["$domainpart"]+_} ]]; then
        if is_allowed "$domainpart"; then
            discovered["$domainpart"]=1
        fi
        root_domain=$(get_root_domain "$domainpart")
        if [[ -n "$root_domain" && "$root_domain" != "$domainpart" && ! ${discovered["$root_domain"]+_} ]]; then
            if is_allowed "$root_domain"; then
                discovered["$root_domain"]=1
            fi
        fi
    fi
done

# 4. Insertion en base de tout ce qui est dans le tableau discovered
for asset in "${!discovered[@]}"; do
    insert_asset_discovered "$asset" "whois"
done
